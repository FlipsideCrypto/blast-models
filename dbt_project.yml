# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: "blast_models"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: "blast"

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"
  - "dbt_packages"

tests:
  blast_models:
    +store_failures: true # all tests

on-run-start:
  - "{{ create_sps() }}"
  - "{{ create_udfs() }}"

on-run-end:
  - '{{ apply_meta_as_tags(results) }}'

dispatch:
  - macro_namespace: dbt
    search_order:
      - blast-models
      - dbt_snowflake_query_tags
      - dbt

query-comment:
  comment: '{{ dbt_snowflake_query_tags.get_query_comment(node) }}'
  append: true # Snowflake removes prefixed comments.

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

models:
  optimism_models:
    +copy_grants: true
    +persist_docs:
      relation: true
      columns: true
    +on_schema_change: "append_new_columns"
  livequery_models:
    +materialized: ephemeral
  fsc_evm:
    +enabled: false
    core_package:
      +enabled: true
      silver:
        +enabled: true
        core:
          +enabled: false
          silver__confirm_blocks:
            +enabled: true
      gold:
        +enabled: false
        core:
          +enabled: false
        labels:
          +enabled: true
        prices:
          +enabled: true
    decoder_package:
      +enabled: true
    github_actions_package:
      +enabled: true
  
# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

vars:
  "dbt_date:time_zone": GMT
  STREAMLINE_INVOKE_STREAMS: False
  STREAMLINE_USE_DEV_FOR_EXTERNAL_TABLES: False
  UPDATE_UDFS_AND_SPS: False
  UPDATE_SNOWFLAKE_TAGS: True
  OBSERV_FULL_TEST: False
  WAIT: 0
  HEAL_MODEL: False
  HEAL_MODELS: []
  START_GHA_TASKS: False

  #### STREAMLINE 2.0 BEGIN ####

  API_INTEGRATION: '{{ var("config")[target.name]["API_INTEGRATION"] if var("config")[target.name] else var("config")["dev"]["API_INTEGRATION"] }}'
  EXTERNAL_FUNCTION_URI: '{{ var("config")[target.name]["EXTERNAL_FUNCTION_URI"] if var("config")[target.name] else var("config")["dev"]["EXTERNAL_FUNCTION_URI"] }}'
  ROLES: |
    ["INTERNAL_DEV"]

  config:
  # The keys correspond to dbt profiles and are case sensitive
    dev:
      API_INTEGRATION: AWS_BLAST_API_DEV
      EXTERNAL_FUNCTION_URI: y9d0tuavh6.execute-api.us-east-1.amazonaws.com/stg/

    prod:
      API_INTEGRATION: AWS_BLAST_API
      EXTERNAL_FUNCTION_URI: 42gzudc5si.execute-api.us-east-1.amazonaws.com/prod/
  
  #### STREAMLINE 2.0 END ####

  #### FSC_EVM BEGIN ####

  ### GLOBAL VARIABLES BEGIN ###
  
  ## REQUIRED
  GLOBAL_PROD_DB_NAME: 'blast'
  GLOBAL_NODE_SECRET_PATH: 'vault/prod/blast/quicknode/mainnet'
  GLOBAL_BLOCKS_PER_HOUR: 1800
  GLOBAL_USES_STREAMLINE_V1: False
  GLOBAL_USES_RECEIPTS_BY_HASH: False

  ### GLOBAL VARIABLES END ###

  ### CORE_PACKAGE VARIABLES BEGIN ###

  ### CORE ###
  ## REQUIRED
  BLOCKS_TRANSACTIONS_REALTIME_EXTERNAL_TABLE: 'BLOCKS'
  BLOCKS_TRANSACTIONS_HISTORY_EXTERNAL_TABLE: 'BLOCKS'

  RECEIPTS_REALTIME_EXTERNAL_TABLE: 'RECEIPTS'
  RECEIPTS_HISTORY_EXTERNAL_TABLE: 'RECEIPTS'

  TRACES_REALTIME_EXTERNAL_TABLE: 'TRACES'
  TRACES_HISTORY_EXTERNAL_TABLE: 'TRACES'

  CONFIRM_BLOCKS_REALTIME_EXTERNAL_TABLE: 'CONFIRM_BLOCKS'
  CONFIRM_BLOCKS_HISTORY_EXTERNAL_TABLE: 'CONFIRM_BLOCKS'

  ## OPTIONAL
  BLOCKS_TRANSACTIONS_REALTIME_TESTING_LIMIT: 3
  BLOCKS_TRANSACTIONS_HISTORY_TESTING_LIMIT: 3

  RECEIPTS_REALTIME_TESTING_LIMIT: 3
  RECEIPTS_HISTORY_TESTING_LIMIT: 3

  TRACES_REALTIME_TESTING_LIMIT: 3
  TRACES_HISTORY_TESTING_LIMIT: 3

  CONFIRM_BLOCKS_COMPLETE_FULL_REFRESH: False
  CONFIRM_BLOCKS_REALTIME_TESTING_LIMIT: 3
  CONFIRM_BLOCKS_HISTORY_TESTING_LIMIT: 3

  ### PRICES ###
  ## REQUIRED
  PRICES_SYMBOLS: 'ETH' 
  PRICES_PLATFORMS: 'Blast' 
  # PRICES_BLOCKCHAINS: 'blast' (defaults to GLOBAL_PROD_DB_NAME)
  # PRICES_NATIVE_BLOCKCHAINS: 'ethereum' -- add to fsc-evm

  ### LABELS

  ### STATS
  ## REQUIRED
  STATS_TOKEN_ADDRESS: '0x4300000000000000000000000000000000000004' 

  ### CORE_PACKAGE VARIABLES END ###

  ### DECODER VARIABLES BEGIN ###

  ### DECODED_LOGS ###
  ## REQUIRED
  DECODED_LOGS_REALTIME_EXTERNAL_TABLE: 'DECODED_LOGS'
  DECODED_LOGS_REALTIME_SQL_LIMIT: 2000000
  DECODED_LOGS_REALTIME_PRODUCER_BATCH_SIZE: 400000
  DECODED_LOGS_REALTIME_WORKER_BATCH_SIZE: 200000

  DECODED_LOGS_HISTORY_EXTERNAL_TABLE: 'DECODED_LOGS'
  DECODED_LOGS_HISTORY_SQL_LIMIT: 7500000
  DECODED_LOGS_HISTORY_PRODUCER_BATCH_SIZE: 20000000
  DECODED_LOGS_HISTORY_WORKER_BATCH_SIZE: 10000000

  ## OPTIONAL
  DECODED_LOGS_REALTIME_TESTING_LIMIT: 3
  DECODED_LOGS_HISTORY_TESTING_LIMIT: 3

  ### DECODER VARIABLES END ###

  #### FSC_EVM END ####